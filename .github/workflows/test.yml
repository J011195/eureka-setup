name: Test CLI

on:
  push:
  pull_request:
  workflow_call:

jobs:
  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate misc/folio-netcat/Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./eureka-cli/misc/folio-netcat/Dockerfile

      - name: Validate misc/folio-vault/Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./eureka-cli/misc/folio-vault/Dockerfile

      - name: Validate misc/folio-kafka-tools/Dockerfile
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ./eureka-cli/misc/folio-kafka-tools/Dockerfile

      - name: Validate misc/docker-compose.yml
        run: docker compose -f ./eureka-cli/misc/docker-compose.yaml config

  docker-trivy:
    name: Docker Security Scan (Lightweight)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Scan individual Dockerfiles to avoid Rego parsing issues
      - name: Scan folio-netcat Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/folio-netcat/Dockerfile'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Scan folio-vault Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/folio-vault/Dockerfile'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Scan folio-kafka-tools Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/folio-kafka-tools/Dockerfile'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      # Generate combined SARIF report for GitHub Security tab
      - name: Generate SARIF report for all Dockerfiles
        uses: aquasecurity/trivy-action@master
        if: always() && github.actor != 'dependabot[bot]'
        with:
          scan-type: 'config'
          scan-ref: './eureka-cli/misc/'
          format: 'sarif'
          output: 'trivy-docker-config.sarif'

      - name: Upload Docker config scan to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always() && github.actor != 'dependabot[bot]'
        with:
          sarif_file: 'trivy-docker-config.sarif'
          category: 'docker-configs'

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          working-directory: ./eureka-cli
          args: --timeout=5m
          only-new-issues: true

  go-trivy:
    name: Go Security Scan (Lightweight)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      # Fast fail-first approach
      - name: Quick scan for HIGH/CRITICAL vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './eureka-cli'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      # SARIF generation (only if quick scan passes)
      - name: Generate detailed SARIF report
        uses: aquasecurity/trivy-action@master
        if: success() && github.actor != 'dependabot[bot]'
        with:
          scan-type: 'fs'
          scan-ref: './eureka-cli'
          format: 'sarif'
          output: 'trivy-go-results.sarif'

      - name: Upload Go dependency scan to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always() && github.actor != 'dependabot[bot]'
        with:
          sarif_file: 'trivy-go-results.sarif'
          category: 'go-dependencies'

  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    # Allow this job to fail without blocking downstream jobs during transition period
    continue-on-error: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Run unit tests with coverage
        working-directory: ./eureka-cli
        run: |
          echo "üß™ Running unit tests for packages with comprehensive test coverage..."
          echo "Packages: helpers, httpclient"
          # Run tests only for packages with comprehensive test coverage
          go test ./helpers/... ./httpclient/... -coverprofile=coverage.out -covermode=atomic

      - name: Generate coverage report
        working-directory: ./eureka-cli
        run: |
          echo "## Test Coverage Report (Helpers & HTTPClient)" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | grep -E "(helpers/|httpclient/)" | while read line; do
            package=$(echo "$line" | awk '{print $1}' | sed 's/.*\///')
            coverage=$(echo "$line" | awk '{print $3}')
            echo "| $package | $coverage |" >> $GITHUB_STEP_SUMMARY
          done
          
          total_coverage=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}')
          echo "| **Total (Helpers & HTTPClient)** | **$total_coverage** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è Coverage calculated only for packages with comprehensive test suites." >> $GITHUB_STEP_SUMMARY

      - name: Check coverage threshold
        working-directory: ./eureka-cli
        run: |
          # Calculate total coverage percentage for tested packages only
          COVERAGE=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}' | sed 's/%//')
          echo "Current test coverage (Helpers & HTTPClient): ${COVERAGE}%"
          
          # Check if coverage is below 80% using awk for floating point comparison
          THRESHOLD_CHECK=$(echo "$COVERAGE" | awk '{if ($1 >= 80) print "PASS"; else print "FAIL"}')
          
          if [ "$THRESHOLD_CHECK" = "FAIL" ]; then
            echo "‚ùå Test coverage ${COVERAGE}% is below the required 80% threshold for tested packages"
            echo "Please add more tests to improve coverage in helpers/ and httpclient/ packages"
            exit 1
          else
            echo "‚úÖ Test coverage ${COVERAGE}% meets the required 80% threshold for tested packages"
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./eureka-cli/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test:
    name: Test CLI Help Command (${{ matrix.os }}-${{ matrix.goarch }})
    needs: [go-lint, docker-lint, docker-trivy, go-trivy, unit-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goarch: amd64
          - os: windows-latest
            goarch: amd64
          - os: macos-latest
            goarch: amd64
          - os: macos-latest
            goarch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go Environment
        uses: ./.github/actions/setup-go

      - name: Set up .eureka directory permissions
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            mkdir -p "$USERPROFILE\.eureka"
          else
            mkdir -p "$HOME/.eureka"
            chmod -R 0700 "$HOME/.eureka"
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Build CLI
        working-directory: ./eureka-cli
        env:
          GOOS: ${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o eureka-cli${{ runner.os == 'Windows' && '.exe' || '' }}

      - name: Run Help Command Test
        working-directory: ./eureka-cli
        shell: bash
        run: |
          ./eureka-cli${{ runner.os == 'Windows' && '.exe' || '' }} help -d
          echo "Help command ran successfully"
